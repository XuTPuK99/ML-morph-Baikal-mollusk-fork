# -*- coding: utf-8 -*-
"""Draw_model_mollusc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1He6Z-nQ-F7XN13hSnNkCqVPXtE8BIh6x
"""

#Название файлов должно быть в формате "Группа моллюсков" + "(м)" + ".TPS". Пример: Ребристые 2,5-4(м).TPS
#Шрифт должен лежать в той же папке что и программа с данными

import requests
import math
import re
import os
from PIL import Image, ImageDraw, ImageFont

def find_files():
  files = []
  list_file = os.listdir()
  for file in list_file:
    item = file.split(".")
    if len(item) == 2:
      if item[1] == "TPS" :
        files.append(file)
  files.sort()
  return files


def calculation(points, file_name):
  calc_result = []
  pars_result = [0 for _ in range(points * 2)]
  file = open(file_name, mode="r", encoding="UTF-8")

  text = file.read()

  print(text)

  find = re.findall('(?:\s*\d+\.\d+\s+){' + str(points * 2) + '}', text)
  for item in find:
    data = re.split('\s+', item.strip())
    data = [float(d) for d in data]
    pars_result = list(map(sum, zip(pars_result, data)))

  for item in pars_result:
    number = item / len(find)
    calc_result.append(number)

  return calc_result


def draw(result_list,files):
  font = ImageFont.truetype("Times New Roman.ttf", size=120)
  colors = ["red", "blue", "green", "purple"]
  start_position_legend = 100

  count = 0
  height_max = 0
  width_max = 0

  for data in result_list:

    for number_data in range(len(data)):
      number = (number_data + 1) % 2
      if number == 0:
        if data[number_data] > height_max:
          height_max = data[number_data]
          height_max = math.ceil(height_max)
      else:
        if data[number_data] > width_max:
          width_max = data[number_data]
          width_max = math.ceil(width_max)

  image = Image.new('RGB', (width_max, height_max), "white")
  draw = ImageDraw.Draw(image)

  for data in result_list:

    main_data = data.copy()
    cycle = [30, 30, 28, 28]
    for number in cycle:
      main_data.pop(number)
    for number in range(2):
      main_data.append(main_data[number])
    for number in range(len(main_data)):
      if (number + 1) % 2 == 0:
        main_data[number] = height_max - main_data[number]

    circle_data = []
    cycle = [10, 11, 28, 29, 18, 19, 30, 31, 10, 11]
    for number in cycle:
      circle_data.append(data[number])
    for number in range(len(circle_data)):
       if (number + 1) % 2 == 0:
        circle_data[number] = height_max - circle_data[number]

    legend = files[count].split(".")
    legend = "-" + legend[0]

    draw.line(xy = main_data, fill = colors[count], width = 15)
    draw.line(xy = circle_data, fill = colors[count], width = 15)

    draw.text((100, start_position_legend + count * 100), legend, font = font, fill = colors[count])

    count += 1

  image.save('image_result.jpg')


if __name__ == "__main__":

  result_list = []
  files = find_files()
  for file in files:
    result_list.append(calculation(16, file))
  draw(result_list, files)